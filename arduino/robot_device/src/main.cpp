#include <Arduino.h>
#define DEBUG 1

// Tracking settings
const int kTrigAllPin = 5;  // All receivers are connected to this pin
const int kLeftEchoPin = 6;  // needs to be between 2 and 7 (inclusive)
const int kRightEchoPin = 7;  // needs to be between 2 and 7 (inclusive)
const uint32_t kReceiverTimeout = 110000;

// Ultrasonic Settings
struct TimeData {
    uint32_t timeLeft;
    uint32_t timeRight;
};

struct TimeData uTimeData;

// Masks for echo pins
const uint8_t kLeft = (1 << kLeftEchoPin);
const uint8_t kRight = (1 << kRightEchoPin);
const uint8_t kBoth = kLeft | kRight;

// This ID identifies ultrasonic data
const String uID = "U";

// IR Settings
const int kNrIRSensors = 3;
const int kIRLowerBound = 5;
const int kIRUpperBound = 75;
int ir_receiver_pins[] = {A0, A1, A2};
uint32_t ir_data[] = {0, 0, 0};

// This ID identifies IR data
const String iID = "I";

// Radio settings
const uint32_t kRadioDelay = 10000;  // Time of radio communication in microseconds
const String kRadioRequestCode = "$$$";

// Comm Settings
// Code for no signal received
const uint32_t kNoSig = 0xFFFFFFFF;
// Code identifies beginning of message
const String kOpenMsg = "<";
// Code identifies end of message
const String kCloseMsg = ">";
const String kLineSep = "|";

/*
 * Used to activate the receivers
 */
void activateUltrasonic(int trigPin);
/*
 * Sends radio signal to user's device to cause it to emit an ultrasonic pulse.
 */
void requestSignal();
/*
 * Waits for signal to be received on both receivers and returns the time since
 * `startTime` it took in the `timeLeft` and `timeRight` pointers. If no signal
 * is received, the respective output is set to 0xFFFFFFFF (2^32 - 1).
 */
void measureTimes(uint32_t startTime);
/*
 * Uses port manipulation to read all echo pins (specified by the `mask`)
 * extremely fast (~0.1 us).
 * (`PIND` is a byte containing values of pins 0-7.)
 */
uint8_t getEcho(uint8_t mask) {return PIND & mask;}

/*
 * Converst a voltage to a distance
 */
uint32_t convertVoltageToDistance(int voltage);

/*
 * Listens for IR signal
 */
void listenForIR();

/*
 * Sends IR signal
 */
void sendIRData();

/*
 * Sends data generated by sensors over serial
 */

void sendUltraData();

void setup() 
{
  // Radio setup
  pinMode(8,OUTPUT); // switch off the radio
  digitalWrite(8,HIGH);
  pinMode(4,OUTPUT); // switch on the radio
  digitalWrite(4,LOW); // ensure the radio is not sleeping
  Serial.begin(9600);

  // Tracking pins setup
  pinMode(kTrigAllPin, OUTPUT);
  digitalWrite(kTrigAllPin, LOW);
  pinMode(kLeftEchoPin, INPUT);
  pinMode(kRightEchoPin, INPUT);
  
  sendIRData();
}

void loop() 
{
  activateUltrasonic(kTrigAllPin);
  delayMicroseconds(600);
  uint32_t t0 = micros();
  // Both echo pins should be high now
  if (getEcho(kBoth) != kBoth) {
    Serial.print("ERROR: Unexpected echo state");
    Serial.print(kLineSep);
  }
  requestSignal();

  // Now we have about 20 ms to do stuff

  measureTimes(t0);

  // Now we have uTimeData.leftUD and uTimeData.rightUD. We can send them to EV3 or store them
  // in global variables and send in the next iteration. We can also do other
  // stuff here.

  // Send data over serial to the ev3 brick
  digitalWrite(8,LOW);
  sendUltraData();
  listenForIR();
  sendIRData();
  delay(1);
  digitalWrite(8,HIGH);
  
  delay(80);  // TODO: should probably be removed or reduced
}

void requestSignal() {
  Serial.print(kRadioRequestCode);
  Serial.print(kLineSep);
  Serial.flush();
}

// Ultrasonic Functions
void measureTimes(uint32_t startTime)
{
  uint8_t echo = getEcho(kBoth);
  // Both echo pins should still be high
  if (echo != kBoth) {
    Serial.print("ERROR: Listening too late");
    Serial.print(kLineSep);
  }
  uint32_t *timeLeft = &(uTimeData.timeLeft);
  uint32_t *timeRight = &(uTimeData.timeRight);
  *timeLeft = 0xFFFFFFFF;   // Max number
  *timeRight = 0xFFFFFFFF;  // Max number
  // Wait for echo pins to go low and note times
  while (echo != 0x00) {
    echo = getEcho(kBoth);
    if ((*timeLeft == 0xFFFFFFFF) && ((echo & kLeft) == 0))
      *timeLeft = micros() - startTime;
    if ((*timeRight == 0xFFFFFFFF) && ((echo & kRight) == 0))
      *timeRight = micros() - startTime;
  }

  // Check for timeouts
  if (*timeLeft > kReceiverTimeout) *timeLeft = 0xFFFFFFFF;
  if (*timeRight > kReceiverTimeout) *timeRight = 0xFFFFFFFF;

  // Check radio delay
  if (*timeLeft < kRadioDelay) {
    Serial.print("ERROR: Radio delay too high. timeLeft=");
    Serial.print(*timeLeft);
    Serial.print(kLineSep);
    *timeLeft = 0xFFFFFFFF;
  }
  if (*timeRight < kRadioDelay) {
    Serial.print("ERROR: Radio delay too high. timeRight=");
    Serial.print(*timeRight);
    Serial.print(kLineSep);
    *timeRight = 0xFFFFFFFF;
  }

  // Adjust for radio delay
  if (*timeLeft != 0xFFFFFFFF)
    *timeLeft -= kRadioDelay;
  if (*timeRight!= 0xFFFFFFFF)
    *timeRight -= kRadioDelay;
}

void activateUltrasonic(int trigPin)
{
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
}

/* IR Functions */
uint32_t convertVoltageToDistance(int voltage){
  return (voltage > 20) ? (uint32_t)(4800/(voltage-20)) : kNoSig;
}

void listenForIR(){
  int nr_iterations = 5;
  uint32_t distances[nr_iterations][kNrIRSensors];
  for (int iteration = 0 ; iteration < nr_iterations ; ++iteration)
  {
    for (int sensor = 0 ; sensor < kNrIRSensors ; ++sensor)
    {
      distances[iteration][sensor] = convertVoltageToDistance(analogRead(ir_receiver_pins[sensor]));
    }
  }
  
  double means[] = {0.0, 0.0, 0.0};
  // uint32_t variances[] = {0.0, 0.0, 0.0};


  for (int row = 0 ; row < nr_iterations ; ++row)
  {
    for (int col = 0 ; col < kNrIRSensors ; ++col)
    {
      means[col] += distances[row][col] / nr_iterations;
      // variances[col] += (distances[row][col] - means[col]) *  (distances[row][col] - means[col]) / nr_iterations;
    }
  }

  for(int i = 0; i < kNrIRSensors; i++ ){
    // float epsilon = 1.0;
    // if (variances[i] > epsilon)
    // {
    //   ir_data[i] = kNoSig;
    // }
    // else
    // {
    //   ir_data[i] = (uint32_t) means[i];
    // }
    if (means[i] > kIRUpperBound || means[i] < kIRLowerBound) ir_data[i] = kNoSig;
    else ir_data[i] = (uint32_t) means[i];
  }
}

void sendUltraData() {
  Serial.print(kOpenMsg);
  Serial.print(uID);
  Serial.print(uTimeData.timeLeft);
  Serial.print(" ");
  Serial.print(uTimeData.timeRight);
  Serial.print(kCloseMsg);
  Serial.print(kLineSep);
  Serial.flush();
}

void sendIRData(){
  Serial.print(kOpenMsg);
  Serial.print(iID);
  for(int i = 0; i < kNrIRSensors - 1; ++i){
    Serial.print(ir_data[i]);
    Serial.print(" ");
  }
  Serial.print(ir_data[kNrIRSensors - 1]);
  Serial.print(kCloseMsg);
  Serial.print(kLineSep);
  Serial.flush();
}
